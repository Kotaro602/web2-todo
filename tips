●mongoDBの操作
http://qiita.com/svjunic/items/285e9cf20169d70aa1fa

●mongoose population
http://qiita.com/tktk8924/items/4b89f8ee432b0a06c691

●ホントは怖いMongoDb
http://hase.hateblo.jp/entry/2015/10/16/221554

●mongo入門
http://qiita.com/suguru03/items/c7eb44ed90c7e79bbedc


●REDMINEのAPIサンプル
http://forza.cocolog-nifty.com/blog/2013/06/redminerest-api.html
・ユーザの一覧取得
https://172.17.14.133:8085/redmine/users.xml?key=4a4606aff3f4db05dd5f391cbbaf026e7cf588c6&limit=100&page=4
・ユーザのタスク取得
https://172.17.14.133:8085/redmine/issues.xml?&key=4a4606aff3f4db05dd5f391cbbaf026e7cf588c6&assigned_to_id=549&assigned_to_id=728

http://mae.chab.in/archives/2897

Perf.start()
Perf.stop()
Perf.printWasted()

---------------------------------------------------------------
mongo todoListDb
show dbs
show collections
db.todolists.find();
db.todolists.drop();
db.memberlists.find();
db.todolists.remove({redmineUserId: 728});
db.todolists.update({}, { $set : { compDelFlg : false } },true,true);
db.todolists.update({ _id:54920160921010454675 }, { $set : { compDelFlg : 1 } },false,false);
db.todolists.update({},{$unset:{sortNo:1}},false, true)

db.memberlists.update({ _id : 549 }, { $set : { sortNoList : [ 54920160919044533716, 54920160921010454675,54920160921030139102  ]  } },false,false);

localhost/api/registerTask?id=54920160919044533716&redmineUserId=549&taskName=ssssssssssssssaaaaa&dueDate=2017-01-05
localhost/api/registerTask?id=54920160921010454675&redmineUserId=549&taskName=工藤さんに聞きたいこと&dueDate=2017-01-05
localhost/api/registerTask?id=54920160921030139102&redmineUserId=549&taskName=オープン中にダブルクリックで消えてしまう問題が未解決&dueDate=2017-01-05
localhost/api/registerTask?id=12320160921154426802&redmineUserId=728&taskName=テスト用&dueDate=2017-01-05


<user>
<id>549</id>
<login>sekihara_kotaro</login>
<firstname>関原光太郎（Sekihara）</firstname>
<lastname>NSS</lastname>
<mail>sekihara_k@waku-2.com</mail>
<created_on>2013-12-02T01:15:40Z</created_on>
<last_login_on>2016-09-02T01:42:39Z</last_login_on>
</user>
<user>

<user>
<id>728</id>
<login>01008723</login>
<firstname>横浜直也(Yokohama)</firstname>
<lastname>RTC/Off</lastname>
<mail>nyokohama@r.recruit.co.jp</mail>
<created_on>2015-02-09T04:18:09Z</created_on>
<last_login_on>2016-08-18T03:00:42Z</last_login_on>
</user>

db.memberlists.insert({
        '_id': 549,
        'userName': '関原光太郎',
        'redmineKey': '4a4606aff3f4db05dd5f391cbbaf026e7cf588c6'
 });
 
 db.memberlists.insert({
        '_id': 728,
        'userName': '横浜直哉',
        'redmineKey': '4a4606aff3f4db05dd5f391cbbaf026e7cf588c6'
 });
 
 
 ----------------------------
 
 ・L2追加ボタン。
 ・L2画面では開始日を入力可能。
 ・誰もが先のタスクを見ることができる。
 ・開始日がまだのタスクは表示されないように設定も可能
 
 ・案件番号と画面ID置換機能

コンソールでPerf.start()を実行（計測開始）
Drag&Drop操作を行う
コンソールでPerf.stop()を実行（計測終了）
コンソールでPerf.printWasted()を実行（結果出力）

reactのデメリット
・学習コストが高すぎる
⇒サンプルが少ない。（時期も直近だし、ほとんど英語）
サンプルがあったとしても…
⇒ES6とかREDUXとか他のライブラリとの組み合わせをしたうえでどう書けばいいのかわからないことも多数（JSの知識がないから。。。）
⇒version違いでサンプルが動かなかったりする。
・どのコンポーネントだったかわからなくなる。
バグの原因を特定したり、影響がないように新規機能を追加するのはすごくやりやすくなったが、
ファイル管理が大変
クライアントサイドのJSファイルだけで…
reducer 5ファイル
component 30ファイル
その他もろもろ 10ファイル
・(CSS in JSにすることで)　CSSの転記がめんどう。
・記載量が格段に多くなる。
JQueryならば5行くらいで済むコードでも、Action、Reducer、Componentをいっぱい書かないといけない。
Ajaxを除いた画面描写だけでも…
・設計が激ムズ
⇒下手したらstateとDBの更新ロジックやタイミングが異なり不整合が発生するかも。
⇒なんかreducerのロジックとDBのロジックを二重に考えなきゃいけない気がしてくる。
　⇒JQUERYだったら、DBが正でよかったような気がする。0

node.jsのデメリット
・デュアルコアが使えない。
・参照が多いサイトでは結局データが返ってくるまで待機をしなければいけない。
・シングルスレッドなのでエラーハンドリング間違えたら全部落ちる。
⇒ 再起動とか

⇒サイト自体は大きくないけどユーザは多くて、データの参照が少なく更新とかが多く、バッチ処理とかもそんなにないサイト
つまりSPA

初期の学習コスト
⇒各作業のパーセンテージ





●一人でやってみて。
・環境構築が死ねる。（⇒テンプレートがあるとだいぶ違うはず）
・できなきゃ諦められる。
・リファクタリングが自由自在。

-------------------------------------------------
State設計

state = [
    members:[
        {
            _id: 549,   //redmineId
            redmineKey: 4a4606aff3f4db05dd5f391cbbaf026e7cf588c6,
            userName: "関原光太郎",
            sortNoList:[ //将来的にはさらに配列構造にする。
                "54920160919044533716",
                "54920160921010454675",
                "54920160921154426802",
                "98305",
                …
            ],
            memberConf:{
                //未実装
            }
        },
        {
            //…次のメンバ
        }
    },
    tasks:[
        {
            _id: "54920160919044533716", //タスクID
            redmineUserId: 549,
            taskName: "[本サイト][本体系]本番アカウント取りまとめ",
            tempDelFlg: 1,
            compDelFlg: 0,
            startDate: "2016-09-01",
            dueDate: "2016-09-01", //ISO標準にしとく
            estimate: 2.5,
            priority: 1,
            taskMemo: "テストテストテストテストテストテストテストテストテスト",
            privateFlg: 0,
            createUserId: 999,
            belongedProjectId: 3
        },
        {
            //…次のタスク
        }
    ],
    projects: [
        {
            _id: 1,
            projectName: "18本サイト",
            membersIdList:[
                549,
                444,
                436
                …
            ],
            projectConf:{
                //未実装
            }
        },
        {
            //…次のプロジェクト
        }
    ],
    conf:{
        openTaskId: "54920160919044533716",
        openRedmineId: "104502"
    }
}
